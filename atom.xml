<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ollivander]]></title>
  <link href="http://ollivander.franzoni.eu/atom.xml" rel="self"/>
  <link href="http://ollivander.franzoni.eu/"/>
  <updated>2013-01-21T23:38:05+01:00</updated>
  <id>http://ollivander.franzoni.eu/</id>
  <author>
    <name><![CDATA[Alan Franzoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Packaging Woes - part 1]]></title>
    <link href="http://ollivander.franzoni.eu/2013/01/21/python-packaging-woes/"/>
    <updated>2013-01-21T23:40:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2013/01/21/python-packaging-woes</id>
    <content type="html"><![CDATA[<p>This is a spinoff from my <a href="https://ep2012.europython.eu/conference/talks/language-alone-wont-pay-your-bills">Europython 2012 talk</a> (<a href="http://www.youtube.com/watch?v=JlNYO4zUDAQ">video</a>, <a href="https://ep2013.europython.eu/media/conference/slides/language-alone-wont-pay-your-bills.pdf">slides</a>).</p>

<p>Some days ago I got involved in a brief <a href="https://twitter.com/hpk42/status/292599238095933440">discussion</a> on the topic, <strong>so here&#8217;s what I think about Python packaging and dependency management: it&#8217;s in a very bad state, requires a lot of manual intervention to work properly and heavily limits code reuse.</strong></p>

<p>Why? Let&#8217;s see.</p>

<h2>The Packaging Conspiracy</h2>

<h3>Aim</h3>

<p>No, it&#8217;s not a conspiracy to force you to learn something you don&#8217;t care about. The whole point of packaging is to make code reuse easy enough, both for the developer&#8217;s own sake (e.g. shared code between different projects) and for sharing it with the public.</p>

<p><strong>Packaging usually involves dependency management</strong>; this happens in most Linux distributions as well as other packaging systems (e.g. Apache Maven, Rubygems), because you don&#8217;t just release your code in &#8220;in the dark&#8221;: you are releasing version 1.0.0 of your code on January, 1st 2013, and that usually matches (or should match) an exact revision on your source control system, and a precise set of dependencies, because your own software or library may have its own requirements.</p>

<h3>It&#8217;s an overkill!</h3>

<p>Some developers think all of this is a waste of their time.</p>

<p><em>D: Hey Alan, are you really saying say I can&#8217;t just copy and paste some source code in some directory and just go on? How much time should I spend at this tedious task?!?</em></p>

<p>A: Sure, just copy and paste. And remember copying and pasting all transitive dependencies as well. And since this is Python, start hoping all your transitive dependencies are pure Python, otherwise good luck at copypasting C source code into your repo and remembering to compile it every time. And whenever you need a bugfix in your upstream dependency, good luck at remembering where you&#8217;ve fetched that code from, and at which revision. Oh, did you write the URL and the revision somewhere in the VCS commit message? Fine, <strong>you&#8217;re doing by hand the work that a good dependency management tool is supposed to do</strong>. If you like that.</p>

<p><em>D: OK, ok. I got it. So now I&#8217;ve added my dependencies. But what the heck, does the version really matter? I don&#8217;t care! If a new version of something I rely on is released, it will contain bugfixes and maybe new features, but won&#8217;t break my code.</em></p>

<p>A: Dear developer, I think your great trust in the Developer From The Next Door is something that feeds your heart but hinders your brain. You should depend on Only One Version for your production code; when it&#8217;s time to upgrade to a later one, you need to do a manual test run and verify everything is fine. If you forget about doing that, your imagination will be the only limit to whatever mess can happen.</p>

<p><em>D: OK, ok, now I&#8217;ve set versions for all my deps. What version should I use for my own software, though? Can I just pick any version I like? First version 1.0, then 1.1, until I get to 1.99 and i move to 2.0?</em></p>

<p>A: Try doing something meaningful, and stick to your plan. <strong>You can pick your own versioning policy</strong>. Usually your version numbers should distinguish at least between major releases, where you can break backwards compatibility (if you must, not just because you enjoy) and add a lot of new things, and bugfix releases, where you try to minimize the changes to what really needs to be fixed, in order not to mess up client code. Many softwares used to use a two-dotted version number, something like MAJOR.MINOR.REVISION, with REVISION being used for bugfixes only, but the distinction between MAJOR and MINOR is blurred and often just something &#8220;emotional&#8221;. If you perform small incremental changes on your codebase - <a href="http://blog.chromium.org/2010/07/release-early-release-often.html">a-la-Chrome</a> - you can stick with just MAJOR.REVISION. Every feature-adding release increases the MAJOR, every bugfix increases the REVISION. Of course, remember that your MAJOR should be strictly increasing, while REVISION is usually reset at 0 for every MAJOR and then strictly increasing.</p>

<p><em>D: So, what should I do now? Where do I release my code? Should I copypaste my code somewhere? I know of a great pastebin!</em></p>

<p>A: You should usually aggregate your build into an artifact (= product of the build) and you should upload it to a shared repository, where you and other people agree uploading your software to and fetching other people software from.</p>

<p><em>D: YEAH! I&#8217;ve just released version 0.0.2 to the public. Now I&#8217;m deleting 0.0.1, right?</em></p>

<p>A: No. Never. Ideally, unless you must - by must I mean something like &#8220;there&#8217;s a password for my bank account in the source code&#8221; or &#8220;I mistakenly copypasted code for which I hadn&#8217;t the copyright&#8221; - <strong>you should never, ever, ever, remove a released version</strong>. You never know who&#8217;s using it - if my software works fine with 0.0.1, why should I be forced to upgrade? You can shout at me if I ever ask anything about it to you, according to your version policy, but you shouldn&#8217;t care about old versions otherwise. If tagging is supported on the repository you might want to tag old versions as &#8220;deprecated&#8221;, &#8220;bugged&#8221;, or maybe &#8220;donut&#8221; if they contain a huge security hole.</p>

<p><em>D: I like fancy names. Can I name my next release 2.0.5sarah? You know, it&#8217;s my first daughter and she was born in the very day of such release.</em></p>

<p>A: I&#8217;m happy of hearing that, but please stick with numbers only. Is 2.0.5sarah higher or lower than 2.0.6? No, &#8220;lexicographical&#8221; is not what you and I want to hear in such context. You may want to use a suffix/prefix/tag to mark non-final releases, e.g. alpha/beta/development releases, preferably a SINGLE suffix, which is widely recognized, for all of those, and decide once-for-all if it means lower or higher. Usually it means &#8220;lower&#8221;, so that 2.0.0beta is &lt; 2.0.0, but that&#8217;s not always the case - a very good idea is to deny that the same version of a package can exist both for a development and production version. I.e. if 2.1.&#8221; is beta, 2.0.5 can be a production release, but not 2.1.0 or 2.1.1.</p>

<p><em>D: There&#8217;re a lot of things to remember about dependency management and packaging. Should I learn everything by heart?</em></p>

<p>A: What the heck, no. <strong>Your packaging tool should guide you in such practices</strong> and prevent you from going stray unless it&#8217;s what you really mean to do! That why I&#8217;m complaining in the first place about the way Python does packaging!</p>

<p>In part 2 I&#8217;ll dig into Python-packaging specific issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Killer Features]]></title>
    <link href="http://ollivander.franzoni.eu/2013/01/17/php-killer-features/"/>
    <updated>2013-01-17T00:10:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2013/01/17/php-killer-features</id>
    <content type="html"><![CDATA[<p>I don&#8217;t like php, and I&#8217;ve got <a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">my reasons</a>.
I&#8217;ve met a lot of people who dislike PHP and don&#8217;t see how possibly anyone, anyhow, could think about ever
using PHP in any real-world project out there, and simply dismiss PHP as a crap being created and used from
and for incompetent stupid people around the world.</p>

<p>On the other side there&#8217;re a bunch of PHP supporters which show you how wonderful is PHP, how many people
use it and how widespread it is, and whoever says the contrary is just an enterprisey fool which spends
nights at getting things done in Java or C#.</p>

<p>I disagree with both groups (of course!) and I think that PHP&#8217;s got its unique set of killer features
that make it still valuable, and those should be acknowledged.</p>

<p>First, it&#8217;s not PHP by itself - there&#8217;s the <a href="http://en.wikipedia.org/wiki/LAMP_(software_bundle%29">LAMP stack</a>,
a de-facto pseudo-standard; interoperability of PHP applications on many different hostings work quite well.
This is very different from most other platforms, where you must either adapt your development environment
to what your hosting provides, like in Google App Engine, or you must find a way to tune your hosting environment
to match your required dependencies. Not even Java, which heavily relies on standardized APIs, was able to
reach a similar consensus on a standard stack.</p>

<p>And this sort of Platform-as-a-Service offering is widespread. This is catching on lately for other languages
with things like <a href="https://developers.google.com/appengine/">Google App Engine</a>,
<a href="http://www.jelastic.com">Jelastic</a>, <a href="http://www.engineyard.com">Engineyard</a>, <a href="http://www.heroku.com">Heroku</a>
(while this last one is slightly more complex), but on PHP there&#8217;s simply a incredible amount of really
cheap and simple hosting. If you&#8217;re willing to spend something like 50 EUR an year you can find out really
good PHP hostings just everywhere, and you can expect to go down to 15 EUR per year and still have something
that&#8217;s pretty decent.</p>

<p>What&#8217;s all this hosting good for? Do you create your own custom software in PHP and run on top of that? Of course
not! Many experienced PHP developers go with their own infrastracture in order to have full control and tuning;
the real bulk of PHP installations (IMHO - I don&#8217;t have collected actual data on such topic, maybe one day I will)
consists of existing free software installations. Existing software written in PHP makes the difference.
There&#8217;re a lot of people that simply don&#8217;t care about PHP or programming at all, and yet they use PHP every day thanks to existing open source software.</p>

<p>Do you want a blog engine that you can customize and offers a variety of plugins that have nothing to do with
a blog? Here&#8217;s Wordpress. Would you like to manage a community? Drupal is your friend.</p>

<p>Please note that, more often than not, the available PHP software is not the &#8220;best of the breed&#8221;. Other software
exists that is better, or faster, or offers more functionality, but PHP is usually &#8220;good enough&#8221;, allows &#8220;quick and dirty&#8221;
customization, and it&#8217;s free.</p>

<p>And doesn&#8217;t require to be a developer to be installed - it&#8217;s targeted at the slightly experienced user. I think
that installation wizards in PHP are really well constructed (although they often require full manual intervention
and it would be hard to automate them via command-line scripts or similar) and I sometimes miss them in other
languages (like Ruby, Python, Java), where heavy command-line and config editing is required, many times in
non-obvious way. Most PHP applications contain the application AND a web-based configuration tool for such application
- that&#8217;s an obvious thumbs up.</p>

<p>The &#8220;install your own web software&#8221; approach is getting less useful nowadays, with a lot of great services around that let you
do almost anything you&#8217;d do with a php software, yet it was very common until mid 2000s to setup your own hosting
and your own software instance, and it retains a lot of charm on users that want
to feel empowered, that want to &#8220;own&#8221; their website and make modifications to it (and maybe they want to say they&#8217;re PHP
programmers because what they did) - php can be edited and new pages appear live on the server!</p>

<p>Then, don&#8217;t forget there&#8217;re many PHP developers around the world. It&#8217;s not an exotic language - it&#8217;s quite mainstream,
if you need a custom feature you won&#8217;t go in mancraft-starvation mode. Developer quality in such world may be a problem,
but if you can find somebody who&#8217;s not a PHP-only developer, you should feel safe.</p>

<p>And remember: most software for PHP is content-centered. There&#8217;s very little business logic in it. PHP works
well as long as your application only does only <a href="http://en.wikipedia.org/wiki/CRUD">CRUD</a>. Advanced usages,
anything that would require a sort of application server or persistent, long-running process, should be avoided.</p>

<p>So, PHP is simply great for its target. If you want to have your own website, with your own domain, where you can do
whatever you like, you don&#8217;t care for quality, uptime, or security, PHP is simply the right tool for you.</p>

<p>You can even use it for learning some programming basics, but PHP is gotcha-intensive, and you aren&#8217;t a
real PHP programmer if you don&#8217;t know at least 75% of <a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">such gotchas</a> :-). Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode and Encoding: Python vs Java Shootout, part 2]]></title>
    <link href="http://ollivander.franzoni.eu/2012/07/23/unicode-and-encoding-python-vs-java-shootout-part-2/"/>
    <updated>2012-07-23T13:30:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2012/07/23/unicode-and-encoding-python-vs-java-shootout-part-2</id>
    <content type="html"><![CDATA[<p>So, here we come to our second part; if you did miss the first, it&#8217;s <a href="http://ollivander.franzoni.eu/2012/02/22/unicode-and-encoding-python-vs-java-shootout-part-1/">there</a>. All of the following discussion is valid on Sun Java 6.</p>

<p>Let&#8217;s see the way Java handles unicode issues and why it&#8217;s usually less problematic than Python - or, at least, while it <strong>looks</strong> less problematic than Python.</p>

<p>String literals in Java, just like in Python 3, are just Unicode objects; so you don&#8217;t need to think whether it&#8217;s a &#8220;binary string&#8221; or a &#8220;unicode object&#8221;; if it&#8217;s a binary blob, you&#8217;ll probably get a byte[], which should result in a &#8216;here be dragons&#8217; behaviour about encoding.</p>

<p>Nevertheless, whenever you want to print out a string you actually need binary data, raw bytes! How does Java find out what to do?</p>

<p><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/System.html#out">System.out</a>, which is an instance of <a href="http://docs.oracle.com/javase/6/docs/api/java/io/PrintStream.html">java.io.PrintStream</a>, internally uses a <a href="http://docs.oracle.com/javase/6/docs/api/java/io/OutputStreamWriter.html">java.io.OutputStreamWriter</a> which gets initialized using <a href="http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html#defaultCharset()">Charset.defaultCharset()</a>, and such value will be used for conversions between raw bytes and strings:</p>

<figure class='code'><figcaption><span> (Encoding.java)</span> <a href='http://ollivander.franzoni.eu/downloads/code/eu.franzoni.examples/src/eu/franzoni/examples/pythonvsjavaencoding/Encoding.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">eu</span><span class="o">.</span><span class="na">franzoni</span><span class="o">.</span><span class="na">examples</span><span class="o">.</span><span class="na">pythonvsjavaencoding</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.nio.charset.Charset</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Encoding</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">myString</span> <span class="o">=</span> <span class="s">&quot;àèìòù&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Charset</span><span class="o">.</span><span class="na">defaultCharset</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myString</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">myString</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">Charset</span><span class="o">.</span><span class="na">defaultCharset</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (Encoding.java.out)</span> <a href='http://ollivander.franzoni.eu/downloads/code/eu.franzoni.examples/src/eu/franzoni/examples/pythonvsjavaencoding/Encoding.java.out'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>class java.io.PrintStream
</span><span class='line'>UTF-8
</span><span class='line'>àèìòù
</span><span class='line'>àèìòù
</span></code></pre></td></tr></table></div></figure>


<p>The value of the default charset is detected by the JVM at startup, and it can vary on different OSes and because of different language environment settings. On Sun Java you can even set at JVM launch time through the file.encoding property, but that&#8217;s discouraged as it can be unpredictable and unreliable. On the contrary, <strong>you should always use constructors and methods that accept a charset parameter</strong> if you&#8217;re converting to/from raw bytes, just like <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#getBytes(java.nio.charset.Charset)">String.getBytes(Charset charset)</a> or <a href="http://docs.oracle.com/javase/6/docs/api/java/io/OutputStreamWriter.html#OutputStreamWriter(java.io.OutputStream,%20java.nio.charset.Charset)">OutputStreamWriter(OutputStream outputStream, Charset charset)</a></p>

<p>So far, so good. But what happens if the outputstream is unable to handle the chars you&#8217;d like it to write?</p>

<figure class='code'><figcaption><span> (CantEncode.java)</span> <a href='http://ollivander.franzoni.eu/downloads/code/eu.franzoni.examples/src/eu/franzoni/examples/pythonvsjavaencoding/CantEncode.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">eu</span><span class="o">.</span><span class="na">franzoni</span><span class="o">.</span><span class="na">examples</span><span class="o">.</span><span class="na">pythonvsjavaencoding</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CantEncode</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// change default output stream</span>
</span><span class='line'>        <span class="n">OutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;eu.franzoni.examples/src/eu/franzoni/examples/pythonvsjavaencoding/CantEncode.output&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">PrintStream</span> <span class="n">printStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">outputStream</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;ASCII&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">printStream</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">myString</span> <span class="o">=</span> <span class="s">&quot;àèìòù&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myString</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (CantEncode.output)</span> <a href='http://ollivander.franzoni.eu/downloads/code/eu.franzoni.examples/src/eu/franzoni/examples/pythonvsjavaencoding/CantEncode.output'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>class java.io.PrintStream
</span><span class='line'>?????
</span></code></pre></td></tr></table></div></figure>


<p>ASCII encoding cannot possibly output the accented chars, so they&#8217;re replaced with question marks instead of throwing the dreaded UnicodeEncodeError.</p>

<p>Which approach is the best? That depends on the context. If you expect somebody to actually read your text, the Java approach might just let an error slip unnoticed for a long time, while the Python approach would trigger an immediate &#8216;heads up!&#8217;. Otherwise if you&#8217;re just logging something to the console (or to any other stream) an exception might disrupt your otherwise well-working program and force an unnecessary quit. The Java approach just looks easier for the non-charset-aware because it throws fewer errors around.</p>

<p>But there&#8217;s another situation where Java falls short of Python: source file encoding. While Python allows setting it on a per-file basis and defaults it to iso-8859-1 if the coding directive is not there, on Java you&#8217;ll use <a href="http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/javac.html">javac</a> <strong>-encoding</strong> flag to set it globally, per compile, in order to tell the compiler which kind of encoding the source file uses; <strong>if you don&#8217;t pass such option, the platform default converter is used</strong></p>

<p>What&#8217;s the problem with this approach? Consider a very common situation: you work on a project on Linux, your platform defaults to UTF-8 and everything just works.</p>

<p>Then you checkout your project on Windows; you compile it, the default charset is Windows-1252 and all your files print garbage. That&#8217;s what happens, in fact:</p>

<figure class='code'><figcaption><span> (multiple_encodings_output.sh)</span> <a href='http://ollivander.franzoni.eu/downloads/code/eu.franzoni.examples/src/multiple_encodings_output.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;utf8 compiled:&quot;</span>
</span><span class='line'>javac -encoding utf8 eu/franzoni/examples/pythonvsjavaencoding/Encoding.java <span class="o">&amp;&amp;</span> java eu.franzoni.examples.pythonvsjavaencoding.Encoding
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;windows-1252 compiled:&quot;</span>
</span><span class='line'>javac -encoding windows-1252 eu/franzoni/examples/pythonvsjavaencoding/Encoding.java <span class="o">&amp;&amp;</span> java eu.franzoni.examples.pythonvsjavaencoding.Encoding
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (multiple_encodings_output.sh.out)</span> <a href='http://ollivander.franzoni.eu/downloads/code/eu.franzoni.examples/src/multiple_encodings_output.sh.out'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>utf8 compiled:
</span><span class='line'>class java.io.PrintStream
</span><span class='line'>UTF-8
</span><span class='line'>àèìòù
</span><span class='line'>àèìòù
</span><span class='line'>windows-1252 compiled:
</span><span class='line'>class java.io.PrintStream
</span><span class='line'>UTF-8
</span><span class='line'>Ã Ã¨Ã¬Ã²Ã¹
</span><span class='line'>Ã Ã¨Ã¬Ã²Ã¹
</span></code></pre></td></tr></table></div></figure>


<p>As you can see there, it&#8217;s not that the JVM encoding has any issue at runtime; it&#8217;s the parser, at compile time, which is told a wrong encoding about the string literals in your source code. There&#8217;s no way around this!</p>

<p>What I can recommend you is to ALWAYS set the <a href="http://maven.apache.org/general.html#encoding-warning">project.build.sourceEncoding</a> property when using Maven to compile, and to ALWAYS set the <a href="http://ant.apache.org/manual/Tasks/javac.html">encoding attribute</a> whenever you&#8217;re using Ant. This will save you a lot, lot, lot of headaches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrated to Octopress]]></title>
    <link href="http://ollivander.franzoni.eu/2012/07/17/migrated-to-octopress/"/>
    <updated>2012-07-17T17:20:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2012/07/17/migrated-to-octopress</id>
    <content type="html"><![CDATA[<p>My blog was migrated to Octopress.</p>

<p>I apologize if you had an RSS-firing or you were tweet-spammed; It seems that dealing with RSS migration
is not trivial.</p>

<p>I suggest you update your feed reader to use the new feed you can find at <a href="http://ollivander.franzoni.eu/atom.xml">http://ollivander.franzoni.eu/atom.xml</a> since the old
URL will probably be dismissed shortly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode and encoding:  Python vs Java shootout, part 1]]></title>
    <link href="http://ollivander.franzoni.eu/2012/02/22/unicode-and-encoding-python-vs-java-shootout-part-1/"/>
    <updated>2012-02-22T13:34:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2012/02/22/unicode-and-encoding-python-vs-java-shootout-part-1</id>
    <content type="html"><![CDATA[<div class='post'>
Before going on with this post, be sure you&#8217;ve read&nbsp;<a href="http://www.joelonsoftware.com/articles/Unicode.html" target="_blank">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a>&nbsp;- otherwise, I won&#8217;t be able to solve your issues.<br /><br />Sometimes Java fans just say that Python Unicode support sucks. While there&#8217;s a bit of truth in that assertion - for Python 2.x at least, since 3.x solved the problem at its root - the real problem lies in the fact that many programmers don&#8217;t know what&#8217;s going on &#8220;under the hood&#8221;, and that python default behaviour is a bit unforgiving.<br /><br />First things first: Python 2.x has got <b><a href="http://docs.python.org/library/stdtypes.html#string-methods">two distinct string types</a>: </b>the so-called &#8220;byte strings&#8221; (str type) are one, and unicode objects (unicode type) are another one. Unicode objects are much like Java strings; they&#8217;re an internal abstraction of Python, and need to be interpreted to/from byte strings whenever printing, reading/writing from/to a file, etc.<br /><br />Sometimes such interpreting &#8220;just works&#8221; (most probably if you&#8217;re dealing with ascii-only text), but if such conversion fails, errors occur:&nbsp;Python infamous and dreaded UnicodeDecodeError can happen in many places and might sometime just puzzle the programmer:<br /><br /><pre class="brush: py"># -*- coding: utf-8 -*-<br />import sys<br /><br />print "current default encoding: " + sys.getdefaultencoding()<br /><br />"àèìòù" + u"asd"<br /></pre><br /><pre class="brush: plain">javapythonunicode$ python unicode_concat.py<br />current default encoding: ascii<br />Traceback (most recent call last):<br />  File "unicode_concat.py", line 6, in &lt;module&gt;<br />  "àèìòù" + u"asd"<br />UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)<br /></pre><br />&nbsp;This happens when trying to concatenate an unicode string to string object. What really happens here, behind the scenes, is explained in unicode_concat_explained.py:<br /><br /><pre class="brush: py"># -*- coding: utf-8 -*-<br />import sys<br /><br />print "current default encoding: " + sys.getdefaultencoding()<br /><br />"àèìòù".decode(sys.getdefaultencoding()) + u"asd"<br /></pre><br />When using a byte string (not a unicode object) python tries to convert that string to unicode before concatenating to a unicode object. Since an encoding wasn&#8217;t specified, python just uses the default.<br /><br />So, if you&#8217;re planning to mix unicode and bytestring objects (which is not a good idea), <b>always remember to explicitly convert string objects to unicode by their decode() method.</b> Or, if you&#8217;re sure the encoding is always the same, you could add a <a href="http://docs.python.org/library/site.html">sitecustomize.py</a> to your interpreter or your project PYTHONPATH, and set such encoding. Beware that setting it system wide may lead to unexpected results when running your project on another machine.<br /><br />Also, just remember that the <a href="http://www.python.org/dev/peps/pep-0263/">coding directive</a> at the begininning of the file does not change unicode encoding/decoding behaviour: that&#8217;s a directive to the parser, which is used to instruct it about the current encoding of the file. That information is not retained nor used at runtime.<br /><br /><br />Let&#8217;s go for another much dreaded error now:&nbsp;UnicodeEncodeError!<br /><br /><pre class="brush: py"># -*- coding: utf-8 -*-<br />import sys<br />print "current stdout encoding: " + str(sys.stdout.encoding)<br />print "current default encoding: " + sys.getdefaultencoding()<br /><br />print u"àèìòù"<br /></pre><br />results in this output: <br /><br /><pre class="brush: plain">javapythonunicode$ python unicode_print.py<br />current stdout encoding: UTF-8<br />àèìòù<br /></pre><br />Everything seems to work (as long as your terminal supports a charset, like UTF-8, or iso-8859-1, which can display accented chars) ! But now let&#8217;s go for some &#8220;black magic&#8221;:<br /><br /><script class="brush: plain" type="syntaxhighlighter">&lt;![CDATA[ javapythonunicode$ python unicode_print.py | tee Traceback (most recent call last):   File "unicode_print.py", line 6, in <module>    print u"àèìòù" UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-4: ordinal not in range(128) current stdout encoding: None current default encoding: ascii ]] </script><br />That may be puzzling, but the sys.stdout printout should give you an hint.<br /><br />Whenever output is to a terminal, Python does perform autodetection of the encoding of your terminal, and subsequently sets sys.stdout accordingly. When sys.stdout encoding is set, any unicode object that gets printed is encoded accordingly. When output is NOT to a terminal, python does not autodetect sys.stdout encoding and, when sys.stdout has no encoding set any unicode object that is printed is <a href="http://docs.python.org/library/stdtypes.html#file-objects" target="_blank">converted according to sys.getdefaultencoding()</a><br /><br />So, what really happens here is:<br /><br /><pre class="brush: py"># -*- coding: utf-8 -*-<br />import sys<br />print "current stdout encoding: " + str(sys.stdout.encoding)<br />print "current default encoding: " + sys.getdefaultencoding()<br /><br />sys.stdout.write(<br />    u"àèìòù".encode(sys.stdout.encoding or sys.getdefaultencoding())<br />                )<br /></pre><br />Since accented characters can be encoded to UTF-8 but not to ASCII, such UnicodeEncodeErrors arise.<br /><br />Also beware of <a href="http://bugs.python.org/issue4947" target="_blank">bug 4947</a>&nbsp;- it may hit you if you&#8217;re using Python 2.6 or or older.<br /><br />
You can find the second part of this article  <a href="http://ollivander.franzoni.eu/2012/07/23/unicode-and-encoding-python-vs-java-shootout-part-2/">here</a>
<br /></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetbrains IDEs: dock-aware launcher for Linux]]></title>
    <link href="http://ollivander.franzoni.eu/2011/12/07/jetbrains-ides-dock-aware-launcher-for-linux/"/>
    <updated>2011-12-07T20:24:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2011/12/07/jetbrains-ides-dock-aware-launcher-for-linux</id>
    <content type="html"><![CDATA[<div class='post'>
<b>UPDATE:</b><br />Most of this is pointless on IDEA &gt;= 11 and PyCharm &gt;= 2, since a <i>Tools -&gt; Create desktop entry </i>menu now exists and will let you do everything my launcher did. You&#8217;ll need to reinstall it at every update - or just use the symlink trick I reccomended with the&nbsp;<a href="https://github.com/alanfranz/jb_ide_launcher/" target="_blank">standalone launcher</a>&nbsp;and edit the IDEA desktop entry.<br /><br />I had<a href="http://ollivander.franzoni.eu/2011/02/pycharm-and-rubymine-linux-desktop.html" target="_blank"> already elaborated</a> on this, and I still thank <a href="http://blog.dutchworks.nl/2011/01/09/make-intellij-idea-behave-properly-in-linux-docks/" target="_blank">Dutchworks</a>&nbsp;for their work, but I was yet to be satisfied with the status of dock awareness for Jetbrains IDEs; I tend to use multiple of those and I was highly dissatisfied with the way the dock grouped all my Java apps - that&#8217;s caused by the fact that many Java apps based on Swing/AWT share the same WM_CLASS attribute, which is used bye the dock to tell one window from another - but you can read more on that from the Dutchworks blog page above.<br /><br />The basic problem is:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://github.com/alanfranz/jb_ide_launcher/raw/master/screenshot-problem.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="345" src="https://github.com/alanfranz/jb_ide_launcher/raw/master/screenshot-problem.jpg" width="640" /></a></div><br />Here I have launched IDEA and PyCharm at the same time, and they&#8217;re grouped with the very same icon by <a href="http://do.davebsd.com/wiki/Docky" target="_blank">docky</a> - you need to right-click the icon and pick the proper subwindow, which is quite an hassle.<br /><br />My previously created solution required to update the launcher and copy agent.jar at every update.<br /><br />So what?<br /><br />I just created a <a href="https://github.com/alanfranz/jb_ide_launcher/" target="_blank">standalone launcher</a>&nbsp;which creates a proper .desktop file in your .local/share/applications directory, does not modify original files and still allows IDEs to have their own distinct icon in the dock:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://github.com/alanfranz/jb_ide_launcher/raw/master/screenshot-solved.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="314" src="https://github.com/alanfranz/jb_ide_launcher/raw/master/screenshot-solved.jpg" width="640" /></a></div><br /><br />There I have both IDEA and PyCharm active at the same time, and they both work properly, and, whenever updating, you can just update the symlink (as suggested in the README from the GitHub repo) and you&#8217;re done!<br /><br />Multiple projects in the same DIE still share the same icon, but that doesn&#8217;t seem to be changeable from the outside, it&#8217;s something that Jetbrains should do; I&#8217;ll open a ticket for that.<br /><br />Enjoy!<br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy any Java webapp via war to Heroku]]></title>
    <link href="http://ollivander.franzoni.eu/2011/10/20/deploy-any-java-webapp-via-war-to-heroku/"/>
    <updated>2011-10-20T23:17:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2011/10/20/deploy-any-java-webapp-via-war-to-heroku</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="http://www.heroku.com/java">Heroku Java</a> support is something I longed for, but they <a href="http://devcenter.heroku.com/articles/java-faq#can_i_deploy_an_application_packaged_as_a_war_file_to_heroku">apparently don&#8217;t support</a> deploying a plain, old war file to Heroku.  <br /><br />I don&#8217;t like that; I&#8217;ve got my own continuous integration setup, and I want to compile my files on my own box - this allows me to keep my own Maven proxy with my own dependencies - which sometimes are patched versions of public ones - &nbsp;so that I don&#8217;t need to push everything on a public repo. I don&#8217;t want to be forced to build everything on Heroku, and I don&#8217;t want to compile anything I push - I&#8217;d usually push to Heroku stable versions only, or maybe integration versions that pass unit, integration and acceptance tests.<br /><br />So what? Don&#8217;t worry, deployment is possible.<br /><br /><script src="https://gist.github.com/1301100.js"> </script><br/><br/>Setup an heroku-aware git repository and a <a href="http://devcenter.heroku.com/articles/java">Cedar stack app,</a> and add the files you see above; your dir structure should look like:<br /><br /><blockquote>pom.xml<br />Procfile<br />src/<br />&nbsp; &nbsp; &nbsp;main/<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;java/<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; root/<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;StartWebApp.java<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resources/<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mywebapp.war</blockquote><br /><br />Now a simple<br /><br /><blockquote>git push heroku master</blockquote><br /><br />Should do the trick, and let you see your fully deployed war app.<br /><br /><br />There&#8217;re still things you need to be aware of; file persistence may not work as expected, since filesystem is ephemeral, and I still need to figure out things related to database configuration, but those should not come at a great expense.<br /><br />I&#8217;ll post updates in the future as soon as I get them right.<br /><br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mock Javamail primer]]></title>
    <link href="http://ollivander.franzoni.eu/2011/08/30/mock-javamail-primer/"/>
    <updated>2011-08-30T21:46:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2011/08/30/mock-javamail-primer</id>
    <content type="html"><![CDATA[<div class='post'>
Small primer for mock javamail, a pretty useful project that will be handy whenever you need to test code that uses POP3/IMAP/SMTP and you wouldn&#8217;t like to build wrappers for anything you need to test - javamail does not really offer interfaces that can be implemented by mock objects, but different implementations can be used at runtime depending on which jars are on the classpath.<br /><br />Take a look at the project homepage:<br /><br /><a href="http://java.net/projects/mock-javamail">http://java.net/projects/mock-javamail</a><br /><br />Be sure you&#8217;ve enabled java.net Maven repo, and add this dependency to your pom.xml:<br /><br /><pre style="background-color: #002b36; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 13pt; line-height: 100%; padding: 4px;"><span style="background-color: #073642; color: #586e75;">1 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #586e75;">&lt;</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">dependency</span><span style="background-color: #002b36; color: #586e75;">&gt;
<br /></span><span style="background-color: #073642; color: #586e75;">2 </span><span style="background-color: #002b36; color: #839496;">            </span><span style="background-color: #002b36; color: #586e75;">&lt;</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">groupId</span><span style="background-color: #002b36; color: #586e75;">&gt;</span><span style="background-color: #002b36; color: #839496;">org.jvnet.mock-javamail</span><span style="background-color: #002b36; color: #586e75;">&lt;/</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">groupId</span><span style="background-color: #002b36; color: #586e75;">&gt;
<br /></span><span style="background-color: #073642; color: #586e75;">3 </span><span style="background-color: #002b36; color: #839496;">            </span><span style="background-color: #002b36; color: #586e75;">&lt;</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">artifactId</span><span style="background-color: #002b36; color: #586e75;">&gt;</span><span style="background-color: #002b36; color: #839496;">mock-javamail</span><span style="background-color: #002b36; color: #586e75;">&lt;/</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">artifactId</span><span style="background-color: #002b36; color: #586e75;">&gt;
<br /></span><span style="background-color: #073642; color: #586e75;">4 </span><span style="background-color: #002b36; color: #839496;">            </span><span style="background-color: #002b36; color: #586e75;">&lt;</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">version</span><span style="background-color: #002b36; color: #586e75;">&gt;</span><span style="background-color: #002b36; color: #839496;">1.9</span><span style="background-color: #002b36; color: #586e75;">&lt;/</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">version</span><span style="background-color: #002b36; color: #586e75;">&gt;
<br /></span><span style="background-color: #073642; color: #586e75;">5 </span><span style="background-color: #002b36; color: #839496;">            </span><span style="background-color: #002b36; color: #586e75;">&lt;</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">scope</span><span style="background-color: #002b36; color: #586e75;">&gt;</span><span style="background-color: #002b36; color: #839496;">test</span><span style="background-color: #002b36; color: #586e75;">&lt;/</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">scope</span><span style="background-color: #002b36; color: #586e75;">&gt;
<br /></span><span style="background-color: #073642; color: #586e75;">6 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #586e75;">&lt;/</span><span style="background-color: #002b36; color: #268bd2; font-weight: bold;">dependency</span><span style="background-color: #002b36; color: #586e75;">&gt;</span></pre><br />You&#8217;re almost ready; now setup your test code this way:<br /><br /><pre style="background-color: #002b36; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 13pt; line-height: 100%; padding: 4px;"><span style="background-color: #073642; color: #586e75;"> 1 </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">class</span><span style="background-color: #002b36; color: #839496;"> IMAPMailRepositoryTest {
<br /></span><span style="background-color: #073642; color: #586e75;"> 2 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #859900;">@Before
<br /></span><span style="background-color: #073642; color: #586e75;"> 3 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">void</span><span style="background-color: #002b36; color: #839496;"> setUp() </span><span style="background-color: #002b36; color: #b58900;">throws</span><span style="background-color: #002b36; color: #839496;"> Exception {
<br /></span><span style="background-color: #073642; color: #586e75;"> 4 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #b58900;">final</span><span style="background-color: #002b36; color: #839496;"> Session session = Session.getInstance(
<br /></span><span style="background-color: #073642; color: #586e75;"> 5 </span><span style="background-color: #002b36; color: #839496;">                System.getProperties());
<br /></span><span style="background-color: #073642; color: #586e75;"> 6 
<br /> 7 </span><span style="background-color: #002b36; color: #839496;">        MimeMessage msg = </span><span style="background-color: #002b36; color: #b58900;">new</span><span style="background-color: #002b36; color: #839496;"> MimeMessage(
<br /></span><span style="background-color: #073642; color: #586e75;"> 8 </span><span style="background-color: #002b36; color: #839496;">                session);
<br /></span><span style="background-color: #073642; color: #586e75;"> 9 </span><span style="background-color: #002b36; color: #839496;">        msg.setRecipients(Message.RecipientType.</span><span style="background-color: #002b36; color: #d33682;">TO</span><span style="background-color: #002b36; color: #839496;">,
<br /></span><span style="background-color: #073642; color: #586e75;">10 </span><span style="background-color: #002b36; color: #839496;">                </span><span style="background-color: #002b36; color: #2aa198;">"testuser@mockserver.com"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">11 </span><span style="background-color: #002b36; color: #839496;">        msg.setSubject(</span><span style="background-color: #002b36; color: #2aa198;">"Some Subject"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">12 </span><span style="background-color: #002b36; color: #839496;">        msg.setText(</span><span style="background-color: #002b36; color: #2aa198;">"sometext"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">13 </span><span style="background-color: #002b36; color: #839496;">        Transport.send(msg);
<br /></span><span style="background-color: #073642; color: #586e75;">14 </span><span style="background-color: #002b36; color: #839496;">    }
<br /></span><span style="background-color: #073642; color: #586e75;">15 
<br />16 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #859900;">@After
<br /></span><span style="background-color: #073642; color: #586e75;">17 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">void</span><span style="background-color: #002b36; color: #839496;"> tearDown() </span><span style="background-color: #002b36; color: #b58900;">throws</span><span style="background-color: #002b36; color: #839496;"> Exception {
<br /></span><span style="background-color: #073642; color: #586e75;">18 </span><span style="background-color: #002b36; color: #839496;">        Mailbox.clearAll();
<br /></span><span style="background-color: #073642; color: #586e75;">19 </span><span style="background-color: #002b36; color: #839496;">    }</span></pre><br /><br /><br />Now you&#8217;re ready to use your mock javamail:<br /><br /><pre style="background-color: #002b36; border-color: #000000; border-style: solid; border-width: 0.01mm; font-family: monospace; font-size: 13pt; line-height: 100%; padding: 4px;"><span style="background-color: #073642; color: #586e75;"> 1 </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">class</span><span style="background-color: #002b36; color: #839496;"> SomeImapClient {
<br /></span><span style="background-color: #073642; color: #586e75;"> 2 
<br /> 3 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">private</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">static</span><span style="background-color: #002b36; color: #839496;"> Logger </span><span style="background-color: #002b36; color: #d33682;">log</span><span style="background-color: #002b36; color: #839496;"> = Logger.getLogger(SomeImapClient.</span><span style="background-color: #002b36; color: #b58900;">class</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;"> 4 
<br /> 5 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">void</span><span style="background-color: #002b36; color: #839496;"> processMail() {
<br /></span><span style="background-color: #073642; color: #586e75;"> 6 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #b58900;">try</span><span style="background-color: #002b36; color: #839496;"> {
<br /></span><span style="background-color: #073642; color: #586e75;"> 7 </span><span style="background-color: #002b36; color: #839496;">            Session session = getMailSession();
<br /></span><span style="background-color: #073642; color: #586e75;"> 8 </span><span style="background-color: #002b36; color: #839496;">            Store store = connect(session);
<br /></span><span style="background-color: #073642; color: #586e75;"> 9 </span><span style="background-color: #002b36; color: #839496;">            Folder folder = openMailFolder(store);
<br /></span><span style="background-color: #073642; color: #586e75;">10 </span><span style="background-color: #002b36; color: #839496;">            findContent(folder);
<br /></span><span style="background-color: #073642; color: #586e75;">11 </span><span style="background-color: #002b36; color: #839496;">        } </span><span style="background-color: #002b36; color: #b58900;">catch</span><span style="background-color: #002b36; color: #839496;"> (MessagingException e) {
<br /></span><span style="background-color: #073642; color: #586e75;">12 </span><span style="background-color: #002b36; color: #839496;">            </span><span style="background-color: #002b36; color: #b58900;">throw</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">new</span><span style="background-color: #002b36; color: #839496;"> RuntimeException(e);
<br /></span><span style="background-color: #073642; color: #586e75;">13 </span><span style="background-color: #002b36; color: #839496;">        } </span><span style="background-color: #002b36; color: #b58900;">catch</span><span style="background-color: #002b36; color: #839496;"> (IOException e) {
<br /></span><span style="background-color: #073642; color: #586e75;">14 </span><span style="background-color: #002b36; color: #839496;">            </span><span style="background-color: #002b36; color: #b58900;">throw</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">new</span><span style="background-color: #002b36; color: #839496;"> RuntimeException(e);
<br /></span><span style="background-color: #073642; color: #586e75;">15 </span><span style="background-color: #002b36; color: #839496;">        }
<br /></span><span style="background-color: #073642; color: #586e75;">16 
<br />17 </span><span style="background-color: #002b36; color: #839496;">    }
<br /></span><span style="background-color: #073642; color: #586e75;">18 
<br />19 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> Session getMailSession() {
<br /></span><span style="background-color: #073642; color: #586e75;">20 </span><span style="background-color: #002b36; color: #839496;">        Properties props = System.getProperties();
<br /></span><span style="background-color: #073642; color: #586e75;">21 </span><span style="background-color: #002b36; color: #839496;">        props.setProperty(</span><span style="background-color: #002b36; color: #2aa198;">"mail.store.protocol"</span><span style="background-color: #002b36; color: #839496;">, </span><span style="background-color: #002b36; color: #2aa198;">"imaps"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">22 </span><span style="background-color: #002b36; color: #839496;">        props.setProperty(</span><span style="background-color: #002b36; color: #2aa198;">"mail.imap.partialfetch"</span><span style="background-color: #002b36; color: #839496;">, </span><span style="background-color: #002b36; color: #2aa198;">"0"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">23 
<br />24 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #d33682;">log</span><span style="background-color: #002b36; color: #839496;">.debug(</span><span style="background-color: #002b36; color: #2aa198;">"Getting session"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">25 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #b58900;">return</span><span style="background-color: #002b36; color: #839496;"> Session.getDefaultInstance(props, </span><span style="background-color: #002b36; color: #b58900;">null</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">26 
<br />27 </span><span style="background-color: #002b36; color: #839496;">    }
<br /></span><span style="background-color: #073642; color: #586e75;">28 
<br />29 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> Store connect(Session session) </span><span style="background-color: #002b36; color: #b58900;">throws</span><span style="background-color: #002b36; color: #839496;"> MessagingException {
<br /></span><span style="background-color: #073642; color: #586e75;">30 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #d33682;">log</span><span style="background-color: #002b36; color: #839496;">.debug(</span><span style="background-color: #002b36; color: #2aa198;">"getting the session for accessing email."</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">31 </span><span style="background-color: #002b36; color: #839496;">        Store store = session.getStore(</span><span style="background-color: #002b36; color: #2aa198;">"imap"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">32 
<br />33 </span><span style="background-color: #002b36; color: #839496;">        store.connect(</span><span style="background-color: #002b36; color: #2aa198;">"mockserver.com"</span><span style="background-color: #002b36; color: #839496;">, </span><span style="background-color: #002b36; color: #2aa198;">"testuser"</span><span style="background-color: #002b36; color: #839496;">, </span><span style="background-color: #002b36; color: #2aa198;">"somepassword"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">34 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #d33682;">log</span><span style="background-color: #002b36; color: #839496;">.debug(</span><span style="background-color: #002b36; color: #2aa198;">"Connection established with IMAP server."</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">35 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #b58900;">return</span><span style="background-color: #002b36; color: #839496;"> store;
<br /></span><span style="background-color: #073642; color: #586e75;">36 </span><span style="background-color: #002b36; color: #839496;">    }
<br /></span><span style="background-color: #073642; color: #586e75;">37 
<br />38 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> Folder openMailFolder(Store store) </span><span style="background-color: #002b36; color: #b58900;">throws</span><span style="background-color: #002b36; color: #839496;"> MessagingException {
<br /></span><span style="background-color: #073642; color: #586e75;">39 </span><span style="background-color: #002b36; color: #839496;">        Folder folder = store.getDefaultFolder();
<br /></span><span style="background-color: #073642; color: #586e75;">40 </span><span style="background-color: #002b36; color: #839496;">        folder = folder.getFolder(</span><span style="background-color: #002b36; color: #2aa198;">"inbox"</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">41 </span><span style="background-color: #002b36; color: #839496;">        folder.open(Folder.</span><span style="background-color: #002b36; color: #d33682;">READ_ONLY</span><span style="background-color: #002b36; color: #839496;">);
<br /></span><span style="background-color: #073642; color: #586e75;">42 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #b58900;">return</span><span style="background-color: #002b36; color: #839496;"> folder;
<br /></span><span style="background-color: #073642; color: #586e75;">43 </span><span style="background-color: #002b36; color: #839496;">    }
<br /></span><span style="background-color: #073642; color: #586e75;">44 
<br />45 </span><span style="background-color: #002b36; color: #839496;">    </span><span style="background-color: #002b36; color: #b58900;">public</span><span style="background-color: #002b36; color: #839496;"> </span><span style="background-color: #002b36; color: #b58900;">void</span><span style="background-color: #002b36; color: #839496;"> findContent(Folder folder) </span><span style="background-color: #002b36; color: #b58900;">throws</span><span style="background-color: #002b36; color: #839496;"> MessagingException, IOException {
<br /></span><span style="background-color: #073642; color: #586e75;">46 </span><span style="background-color: #002b36; color: #839496;">        </span><span style="background-color: #002b36; color: #b58900;">for</span><span style="background-color: #002b36; color: #839496;"> (Message m : folder.getMessages()) {
<br /></span><span style="background-color: #073642; color: #586e75;">47 </span><span style="background-color: #002b36; color: #839496;">            </span><span style="background-color: #002b36; color: #d33682;">log</span><span style="background-color: #002b36; color: #839496;">.debug(m.getSubject());
<br /></span><span style="background-color: #073642; color: #586e75;">48 
<br />49 </span><span style="background-color: #002b36; color: #839496;">        }
<br /></span><span style="background-color: #073642; color: #586e75;">50 
<br />51 
<br />52 </span><span style="background-color: #002b36; color: #839496;">    }
<br /></span><span style="background-color: #073642; color: #586e75;">53 
<br />54 
<br />55 </span><span style="background-color: #002b36; color: #839496;">}</span></pre><br /><br />Output is:<br /><br /><blockquote><blockquote>DEBUG 30 Aug 2011 19:25:25 SomeImapClient:32 - Getting session</blockquote><blockquote>DEBUG 30 Aug 2011 19:25:25 SomeImapClient:38 - getting the session for accessing email.</blockquote><blockquote>DEBUG 30 Aug 2011 19:25:25 SomeImapClient:42 - Connection established with IMAP server.</blockquote><blockquote>DEBUG 30 Aug 2011 19:25:25 SomeImapClient:55 - Some Subject</blockquote><blockquote><br /></blockquote></blockquote><br />Some small gotchas:<br /><br /><ul><li>your store.connect(&#8220;example.com&#8221;, &#8220;username&#8221;, &#8220;anything&#8221;) must match your &#8220;username@example.com&#8221; addressee in msg.setRecipients; different addressees will yield multiple mailboxes.</li>
 <li>Only works for plain imap &amp; pop3 mailboxes. Even though it doesn&#8217;t make a lot of sense to use SSL on a mock mailbox, if you try getting the &#8220;imaps&#8221; store you&#8217;ll get an error as a real implementation of javamail will be employed.</li>
 <li>I&#8217;d always advise to use such tearDown() when doing unit tests, since the Session seems global and different tests could interfere with different contents - unless you use a different fake user/test server url in each of your tests.</li>
 </ul><br /><br /><br /></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Craig Doremus</div>
<div class='content'>
Where&#39;s the rest of the IMAPMailRepositoryTest class with the test methods and assertions?!?</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit testing with Twisted: testing protocols]]></title>
    <link href="http://ollivander.franzoni.eu/2011/04/26/unit-testing-with-twisted-testing-protocols/"/>
    <updated>2011-04-26T21:33:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2011/04/26/unit-testing-with-twisted-testing-protocols</id>
    <content type="html"><![CDATA[<div class='post'>
I had some hard time when testing <a href="http://twistedmatrix.com/trac/">Twisted</a>&nbsp;protocols. Although they should be decoupled from factories, most examples I could find, including those from the <a href="http://twistedmatrix.com/trac/browser/trunk/doc/core/howto/trial.xhtml?format=raw">official doc</a>, were just too noisy and suggested using a factory.<br /><br />I don&#8217;t like that approach - I should not be forced to use a factory - that creates an unnecessary coupling - let&#8217;s just pretend a factory existed and creates a connections, that&#8217;s all our protocol should need.<br /><br />Of course sometimes a protocol is bound to a very specific factory since it needs to invoke methods on it for non protocol-specific data (remember, there&#8217;s just one factory, while there&#8217;s one protocol per connection). I don&#8217;t like that behaviour, since it creates an unnecessary coupling and makes factories huge and not cohesive, and I think protocols should just be injected whatever peers they need during the <a href="http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.Factory.html#buildProtocol">buildProtocol()</a>&nbsp;invocation - but I&#8217;ll talk about that in another post. In the meantime, I reccommend just creating a mock factory and setting it manually on the protocol.<br /><br />So, here it is the solution I baked:<br /><br /><script src="https://gist.github.com/942093.js">  </script><br /><br />What do you think about this solution?</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a successful community-driven software project / part 4]]></title>
    <link href="http://ollivander.franzoni.eu/2011/04/22/building-a-successful-community-driven-software-project-part-4/"/>
    <updated>2011-04-22T18:33:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2011/04/22/building-a-successful-community-driven-software-project-part-4</id>
    <content type="html"><![CDATA[<div class='post'>
This is a multipart post. See <a href="http://ollivander.franzoni.eu/2011/02/building-successful-community-driven.html">part 3</a><br /><br />Just a brief conclusion to my post sequence; the three principles for succeeding at community-driven projects are:<br /><br /><br /><ul><li>Make it easy for the people to give you their feedback - it&#8217;s highly valuable.</li><li>Listen and reply to people&#8217;s feedback. Don&#8217;t do every-possible-requested-thing, but reply on time.</li><li>Don&#8217;t take any policy as a dogma. Everything can be changed.</li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using trial as test runner with zc.buildout]]></title>
    <link href="http://ollivander.franzoni.eu/2011/03/14/using-trial-as-test-runner-with-zc-buildout/"/>
    <updated>2011-03-14T18:10:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2011/03/14/using-trial-as-test-runner-with-zc-buildout</id>
    <content type="html"><![CDATA[<div class='post'>
I&#8217;ve found a good way to launch tests using <a href="http://twistedmatrix.com/trac/wiki/TwistedTrial">Twisted Trial</a> in a <a href="http://www.buildout.org/">zc.buildout</a> enabled project. I was in fear of needing a full-fledged recipe - which I didn&#8217;t have the time nor the will to code.<br /><br />Luckily, <a href="http://pypi.python.org/pypi/zc.recipe.egg">zc.recipe.egg</a> seems good enough to satisfy my needs; I wanted a recipe that could launch all unit tests if no parameter was passed, while retaining the ability to choose which specific unit test was launched on command line.<br /><br /><br />Here it is:<br /><br /><script src="https://gist.github.com/869469.js?file=buildout.cfg"></script><br /><br />That&#8217;s filled in for <a href="http://pydenji.franzoni.eu">pydenji</a><br /><br /><script src="https://gist.github.com/869469.js?file=example.buildout.cfg"></script></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCharm, RubyMine and IDEA linux desktop entries]]></title>
    <link href="http://ollivander.franzoni.eu/2011/02/03/pycharm-rubymine-and-idea-linux-desktop-entries/"/>
    <updated>2011-02-03T23:00:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2011/02/03/pycharm-rubymine-and-idea-linux-desktop-entries</id>
    <content type="html"><![CDATA[<div class='post'>
<b>UPDATED:</b>&nbsp;IDEA entry.<br /><b>UPDATED:</b>&nbsp;Automatic agent add script.<br /><br />I&#8217;m starting to like both <a href="http://www.jetbrains.com/pycharm/">PyCharm</a> and <a href="http://www.jetbrains.com/ruby/">RubyMine</a>, two IDEs from IntelliJ, along with <a href="http://www.jetbrains.com/idea/">IDEA</a><br /><br />I had some problems while they were both running on Linux using a dock - I like <a href="http://www.go-docky.com/">docky</a> - since they&#8217;re both Java apps and they got &#8220;merged&#8221; in a single icon, but then <a href="http://blog.jteam.nl/2011/01/09/make-intellij-idea-behave-properly-in-linux-docks/">I found a solution</a>&nbsp;- pull the <a href="http://jelmer.s3.amazonaws.com/agent.jar">agent</a> into bin folder and just edit pycharm.sh, rubymine.sh and idea.sh this way, around the end of the file:<br /><br /><script src="https://gist.github.com/809723.js?file=idea_launch_with_agent"></script><br /><script src="https://gist.github.com/809723.js?file=pycharm_launch_with_agent"></script><br /><script src="https://gist.github.com/809723.js?file=rubymine_launch_with_agent"></script><br /> If you&#8217;re lazy, or you&#8217;re just tired of readding the agent every time your IDE gets updated, just download the <a href="http://jelmer.s3.amazonaws.com/agent.jar">agent</a> and the adder script for <a href="https://raw.github.com/gist/809723/5ee73ab9d2260685b6f556c3dad1cdb5e62f216a/idea_add_agent.sh">IDEA</a>, <a href="https://raw.github.com/gist/809723/b81e6f53fa800a1a2b20143e12d2a311e671fda0/pycharm_add_agent.sh">PyCharm</a> or <a href="https://raw.github.com/gist/809723/0dbf7ee8bf7bc65a285f70919fc864383cca6709/rubymine_add_agent.sh">RubyMine</a> to your bin directory and re-execute it every time your ide gets updated.   <br /> <br />I was just missing a desktop file entry so they could show up in my menu; IntelliJ currently distributes their ides as .tar.gz archives, no .deb, no .rpm, so I just packed up two small entries and added them to ~/.local/share/applications:<br /><br /><br /><script src="https://gist.github.com/809730.js"></script><br /><br />Replace the PATH_TO_&#8230; and enjoy!<br /><br /><br />EDIT:<br />As a bonus, by just installing &#8220;wmctrl&#8221; you can easily setting global shortcuts for moving pycharm &amp; rubymine IDEs on the current screen and putting them in the foreground:<br /><br /><blockquote>wmctrl -x -R PyCharm</blockquote><blockquote>wmctrl -x -R RubyMine</blockquote>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wmctrl -x -R IDEA<br /><br />&nbsp;In GNOME you can assign such commands as a global shortcuts via System -&gt; Preferences -&gt; Keyboard Shortcuts.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a successful community-driven software project / part 3]]></title>
    <link href="http://ollivander.franzoni.eu/2011/02/01/building-a-successful-community-driven-software-project-part-3/"/>
    <updated>2011-02-01T23:25:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2011/02/01/building-a-successful-community-driven-software-project-part-3</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">This is a multipart post. See <a href="http://ollivander.franzoni.eu/2011/01/building-successful-community-driven.html">part 2</a></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-size: large;"><b><br /></b></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-size: large;"><b>6. State your mission</b></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><i>What&#8217;s your project for? Who should use it? Which platform is designed for?&nbsp;</i></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Answer those questions somewhere in your project page. You won&#8217;t risk people looking for the wrong solution coming to you and asking strange things, and you&#8217;ll be able to dismiss requests as &#8220;out of scope&#8221; if they exceed your vision. <b>Sharing such vision with your users is a necessity</b>, or you&#8217;ll be called a traitor by somebody, someday. As a user, I want to know what requirements was the project designed to accomodate. If I start building a large corporate webapp with tons of users around a small framework designed for personal, low-traffic blogs, I&#8217;m probably doomed to fail.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><i>What&#8217;s you release policy? How do you manage API changes?&nbsp;</i></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Explain how releases are done. Do you just keep a stable main branch and pull development and bugfix branches in it as soon as they&#8217;re ready, so you just sometimes tag the main branch and have a release at that point? Or do you create milestone-oriented branches as soon as you release, e.g. version 1.0.0 is got a release-1.0 branch where you apply bugfixes only and release 1.0.1, 1.0.2 from that? Or have you got a &#8220;stable&#8221; release and a &#8220;development&#8221; release, but you sometimes pull stable features from development to stable?</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">All of that is important from the point of view of the user. I want to understand whether an API can change in an incompatible manner from 1.0.0 to 1.0.1. I want to know if I ever get a 1.0.1 release after 1.0.0 or I&#8217;ll need to pick 1.1.0 with all its changes.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-size: large;"><b>7. Have an homepage</b></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">And make it sure you provide its address in README files and such! You don&#8217;t need a domain name, even though it makes things simpler. It doesn&#8217;t need to be wonderful - a working one will suffice. You can use Google Sites, or any which Google Code, bitbucket or github provide out of the box.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">This may seem a stupid proposition, but in the modern era many users have access to the code for a project without having ever seen the project homepage - central repositories like&nbsp;<a href="http://pypi.python.org/">cheeseshop</a>&nbsp;for Python and&nbsp;<a href="http://www.mavenrepository.com/">maven</a>&nbsp;for Java make this possible.&nbsp;&nbsp;Then, when it&#8217;s time to report an issue or ask a question, the user is puzzled and doesn&#8217;t know where he should head to.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b>Make sure the homepage contains all the info a user needs</b>. Where does discussion take place, how should I file a ticket, where are docs, what&#8217;s the latest release, etcetera - everything should be linked there. Sometimes projects use multiple servers to store their data - the repo is on bitbucket.org, the mailing list on sourceforge.net, and the bugtracker is self-hosted. Of course it&#8217;s better to disable whatever it&#8217;s not in use, but the point it is:&nbsp;<b>the homepage should be the authoritative reference for everything regarding your project.</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><i></i>And keep it <b>updated</b>! That&#8217;s why having a domain name of your own, or a subdomain - e.g. myproject.myowndomain.com - might be a good choice - you can just redirect people if your hosting goes down or you&#8217;d like to change something.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Having stale information on your homepage will just delay people trying to help and maybe prevent some of them from telling you something. &nbsp;I really hate when the homepage says the latest stable version is &#8220;3.0.5&#8221; but the central repo offers &#8220;3.0.6&#8221; - WTF? If you don&#8217;t have the time to keep that in sync, just point to a webpage of the central repo and don&#8217;t duplicate releases on your homepage - nobody says you must.<br /><br />Next: <a href="http://ollivander.franzoni.eu/2011/04/building-successful-community-driven.html">part 4</a></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div><i><br /></i></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a successful community-driven software project / part 2]]></title>
    <link href="http://ollivander.franzoni.eu/2011/01/02/building-a-successful-community-driven-software-project-part-2/"/>
    <updated>2011-01-02T20:05:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2011/01/02/building-a-successful-community-driven-software-project-part-2</id>
    <content type="html"><![CDATA[<div class='post'>
This is a multipart article - link to&nbsp;<a href="http://ollivander.franzoni.eu/2010/12/building-successful-community-driven.html">part 1</a><br /><div><br /></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-size: large;"><b>3. Make it easy to report issues.</b></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Yes, your software is got a bug. Never thought about it, didn&#8217;t you? And here it is.&nbsp;</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Now, <b>users shouldn&#8217;t be forced to climb mountains in order to report it</b>. You might not want it to be dealt with just in the discussion area, so a bug tracker is usually a good idea, but just like the discussion group,&nbsp;<b>quick access&nbsp;</b>should be allowed, either via anonymous issue reporting or using a backend supporting a decentralized authentication system. Remember,&nbsp;<b>any bug reporter is doing you a favor!</b>&nbsp;You shouldn&#8217;t ask too much to them.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Many large open source hosting platforms, like github, launchpad, bitbucket, google code, are great examples of how you can achieve this goal pretty easily.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-size: large;"><b>4. Make it easy to submit bugfix patches.</b></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">This is a big one, and I&#8217;m sure many people won&#8217;t agree with me.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Sometimes a patch comes along a bug report, yet many projects have got some coding standards, and they&nbsp;<b>don&#8217;t accept patches that don&#8217;t follow such standards.</b>&nbsp;</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Whew.&nbsp;</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Many times, though, either the coding standard isn&#8217;t really a widely accepted one, like&nbsp;<a href="http://www.python.org/dev/peps/pep-0008/">PEP-8</a>&nbsp;for Python projects, but it&#8217;s just how the lead developer likes to code, or many old parts of the codebase themselves don&#8217;t follow such standard.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Hence, after I&#8217;ve discovered a bug in your software, I&#8217;ve debugged it, I&#8217;ve tracked it down and now I&#8217;m providing you a patch, you&#8217;re rejecting it on a mostly cosmetic base because of some principles you alone chose to follow. Thank you very much sir, you&#8217;re so nice to me. Don&#8217;t call me by the way, I&#8217;ll call you if I update my patch to achieve your great coding perfection.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The whole point is,&nbsp;<b>your coding standards are your business.&nbsp;</b>Never forget the&nbsp;<a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">Boy Scout rule</a>&nbsp;-&nbsp;<i>you don&#8217;t have to make every module perfect before you check it in.&nbsp;</i>Removing a bug is enough of an improvement to let a patch be accepted. If you don&#8217;t want non-complaint code in your codebase just edit the patch - it should be easy for you - don&#8217;t reject it and don&#8217;t ask the reporter to edit it.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Of course there are perfectly good reasons to reject a patch. If it&#8217;s a &#8220;worst hack ever&#8221; style of patch, or if it adds unnecessary complexity, provokes unintended side effects or changes a behaviour on which existing clients rely, just do whatever you think it&#8217;s right.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">There&#8217;s another top rejection reason: &nbsp;<b>missing unit tests&nbsp;</b>or&nbsp;<b>insufficient&nbsp;coverage.</b>&nbsp;Some projects with high coding standards require a unit test for each functionality and maybe 100% test coverage. It&#8217;s perfectly fine, but there&#8217;re issues with this choice.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Very often there&#8217;re some legacy parts of the codebase that have got little test coverage; in order to achieve 100% test coverage the reporter might be forced to create a unit test that does not exist for some code that he has not written. That&#8217;s a burden and most people will get discouraged.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Other times the overall design in some parts of the code does not allow for easy dependency injection, hence making it hard to create a good unit test which can really test the specific behaviour being patched, and the reporter might be able to reproduce the issue only with an higher-level, more integration-level-like test example.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">In both those cases you should remember that&nbsp;<b>the quality of your codebase is your business.&nbsp;</b>You should not reject a patch from being applied because there&#8217;re no unit tests if creating such a unit test is impractical and the fault is yours. Of course&nbsp;<b>you can create a guideline for patch submission</b>&nbsp;that says that you prefer the issues to be reproduced via a unit test, but don&#8217;t make it a strict requirement. A patch without a test is better than nothing, you might just pick it up later when you&#8217;ve got some time and write a test for it.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Of course if a patch does not convince you for any reason and you don&#8217;t get a unit test, just don&#8217;t apply it - but don&#8217;t be a&nbsp;<a href="http://www.amazon.com/Adrenaline-Junkies-Template-Zombies-Understanding/dp/0932633676">template zombie</a>&nbsp;- i.e. don&#8217;t place policies ahead of people.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">If you&#8217;re unable to reproduce a problem because it happens in scenario you aren&#8217;t able to test, try checking whether&nbsp;the patch causes any drawback to your supported scenarios. If it doesn&#8217;t, you might decide to just trust the reporter.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Feature patches are a completely different story IMHO - when you accept something new in your codebase you should &nbsp;be able to dictate whatever you want.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-size: large;"><b>5. Reply to issues&nbsp;</b></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Reply to issues. Always. If possible, do it in a reasonable amount of time, which should be, in my opinion, ten days at a maximum.&nbsp;<i>You don&#8217;t have to take immediate action.&nbsp;</i>Your reply could just be&nbsp;<i>Investigating the issue&nbsp;</i>or something like that. Remember the&nbsp;<a href="http://jeremy.zawodny.com/blog/archives/009311.html">Inbox Zero</a>&nbsp;approach to GTD: don&#8217;t let unread, unaccepted bug tickets linger in your bugtracker! A lingering ticket is the first stop on the path to killing community support to your project.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The same approach is valid for issues with an attached patch - say something.&nbsp;<i>Don&#8217;t let issues linger unanswered.</i></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><i><br /></i></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">And never, never&nbsp;<i>wake up after a bug has been lingering for months just to ask the reporter if it &#8220;still applies&#8221;!</i>&nbsp;This is terrible, I hate it when it happens. &#8220;Sorry, being too busy but did 37 releases of my software in the meantime, could you check if this still happens with the latest?&#8221;. You&#8217;re probably in a better position for verifying the issue - assuming that a way to reproduce it is provided - on any release, since you made them.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The next part will deal with APIs and public info for your project - see <a href="http://ollivander.franzoni.eu/2011/02/building-successful-community-driven.html">part 3</a></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a successful community-driven software project / part 1]]></title>
    <link href="http://ollivander.franzoni.eu/2010/12/19/building-a-successful-community-driven-software-project-part-1/"/>
    <updated>2010-12-19T13:18:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2010/12/19/building-a-successful-community-driven-software-project-part-1</id>
    <content type="html"><![CDATA[<div class='post'>
There&#8217;s a lot of buzz about open source software lately.&nbsp;Many projects are supposed to embrace the <a href="http://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar">Bazaar development model</a>, but they really don&#8217;t, and their leaders just seem to ignore users a lot. This often leads both to wild forking - one new feature, one new fork that&#8217;s never merged in the original code base - and to multiple incomplete implementations - there&#8217;re many projects to satisfy a single need, but none of them is complete.<br /><br />What should you do to make your project successful? Those are my guidelines. I&#8217;ve split the post into pieces since it was growing too large for a single entry.<br /><br />This is mostly developer-oriented; I think supporting a community of end-users might be slightly different, although concerns might sometimes be similar.<br /><b><br /></b><br /><b><span class="Apple-style-span" style="font-size: large;">1. Make it easy to discuss about your software.</span></b><br />Something might not be clear about your software, whether it&#8217;s usage, availability, license, scope, and so on. It must be easy to ask a question, whether it&#8217;s on a mailing list, on a forum or by any other mean - <a href="https://answers.launchpad.net/">Launchpad Answers</a>&nbsp;or <a href="http://getsatisfaction.com/">GetSatifaction</a>&nbsp;are good alternatives - just <b>don&#8217;t make it too hard</b>&nbsp;to just ask a question!<br /><br />&nbsp;If you&#8217;re using a custom forum or any other portal, <b>make sure it supports a decentralized authentication system</b>, be it&nbsp;OpenID, Google Account, MSN or whatever you like. Very often creating a new username/password couplet, fill in a few forms, clicking to verify an email, etc. etc. may just be <b>too much an hassle </b>for somebody who just wants to ask a small question.<br /><br />Similarly, if you&#8217;re using a mailing list, make sure <b>it&#8217;s not too hard to get subscribed</b>; if possible, just let anyone post a question - then a &#8220;reply all&#8221; from any list subscriber should reach the poster. Don&#8217;t moderate subscriptions and posts unless you&#8217;ve got a really good reason to - e.g. too much spam that automatic filters can&#8217;t handle. Consider using mailing list providers that make it easy to use the ML from the web as well - <a href="http://groups.yahoo.com/">Yahoo Groups</a> and <a href="http://groups.google.com/">Google Groups</a> are great examples; they&#8217;ll give a great overall user experience, and satisfy those who prefer forums and those who prefer mailing lists at the very same time.<br /><span class="Apple-style-span" style="font-size: large;"><b><br /></b></span><br /><span class="Apple-style-span" style="font-size: large;"><b>2. Answer questions and doubts.</b></span><br />This seems a silly one, but it isn&#8217;t. <b>Make sure users get a minimum of feedback, </b>be it just a &#8220;read the FAQ&#8221;, or &#8220;it&#8217;s not implemented yet&#8221; or &#8220;I don&#8217;t know&#8221;. Any message left lingering is a big thumbs down for your project.<br /><i><span class="Apple-style-span" style="font-size: large;"><b><span class="Apple-style-span" style="font-size: large;"><b><br /></b></span></b></span></i><br /><span class="Apple-style-span" style="font-size: large;"><b><span class="Apple-style-span" style="font-size: large;"><b>3. Have a FAQ</b></span></b></span><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span">This was pretty common during the nineties, I can remember being turned down with a &#8220;Read the FAQ&#8221; many times when I was young and inexperienced, but it&#8217;s not such frequent thing anymore. There&#8217;re some questions that get asked again and again. If you don&#8217;t mantain a FAQ you can&#8217;t tell people &#8220;Read the FAQ!&#8221;, and you&#8217;ll need to answer the same question again, and again, and again. And you won&#8217;t like it.</span><br /><span class="Apple-style-span"><br /></span><br /><span class="Apple-style-span">Link to <a href="http://ollivander.franzoni.eu/2011/01/building-successful-community-driven.html">part 2</a>&nbsp;- bug reporting and patch submission.</span><br /><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple and OpenJDK: was I wrong?]]></title>
    <link href="http://ollivander.franzoni.eu/2010/11/21/apple-and-openjdk-was-i-wrong/"/>
    <updated>2010-11-21T23:43:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2010/11/21/apple-and-openjdk-was-i-wrong</id>
    <content type="html"><![CDATA[<div class='post'>
Apple has <a href="http://www.apple.com/pr/library/2010/11/12openjdk.html">announced</a>&nbsp;it will contribute to the OpenJDK project, so there&#8217;s probably no risk that MacOS-specific pieces of the current JDK will be lost. Probably the next, Oracle-backed JDK will be just fine on Mac and will probably be released on time.<br /><br />There&#8217;re two things I don&#8217;t understand:<br /><br /><ul><li>&nbsp;why such a bad timing? Apple could have deprecated his Java and announced OpenJDK participation at the same time - and that would have been good news. I don&#8217;t understand if Apple had already chosen to contribute to OpenJDK or it had been pushed in that direction once it saw what happened in the dev community after their deprecation.</li><li>It&#8217;s still not clear why I can&#8217;t use Java in a software I&#8217;d like to distribute within the Mac App Store. If it&#8217;s Oracle backed it&#8217;s not a &#8220;deprecated technology&#8221; anymore, right? The language restriction was lifted even in iOS apps, why should it come back on Mac apps?</li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Apple should not ditch Java]]></title>
    <link href="http://ollivander.franzoni.eu/2010/10/21/why-apple-should-not-ditch-java/"/>
    <updated>2010-10-21T23:14:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2010/10/21/why-apple-should-not-ditch-java</id>
    <content type="html"><![CDATA[<div class='post'>
I&#8217;m not an hardcore Apple user. My first Apple product ever was a Macbook Pro I bought about one year ago.<br /><br />But I fell in love with the Mac platform, and I think its really strong point is that it&#8217;s <b>versatile</b>. It&#8217;s got plenty of useful proprietary apps that sometimes I want to use or I am forced to use, like Microsoft Office or Adobe Photoshop, a pretty decent Adobe Flash implementation, but since it&#8217;s a BSD derivative it&#8217;s got a lot of nifty tools I&#8217;m used to and that I really like.<br /><br />Sure, Windows might be faster at many tasks, especially if you&#8217;re gonna spend as much money as you need to invest in Apple hardware, but my feelings towards Windows are mixed. I liked XP at the beginning, but it grew old and tired; Vista was a mess; Seven seems fine, but Microsoft still needs to conquer back my trust. Also, Windows is fine as a development platform as long as you use Microsoft tools - which are quite good - but it can get squeaky as soon as you adventure into the <a href="http://en.wikipedia.org/wiki/Free_and_Open_Source_Software">FLOSS</a> land - I can remember some madness I incurred in while trying to use git under Windows.<br /><br />What about Linux? I&#8217;s a great development environment. I simply love my <a href="http://www.ubuntu.com/">Ubuntu</a> box, it&#8217;s exactly as I want it. Eclipse, Netbeans, everything is set up as I want, all the key bindings, all the details. But my Ubuntu box is a tower form factor workstation with ethernet connectivity and two monitors - I think Ubuntu fails pretty hard at the common desktop experience, especially on a notebook - wireless connectivity is often an issue, suspend and hibernate are unreliable, the battery doesn&#8217;t last as long as I&#8217;d like, and Flash on full screen is flaky.&nbsp;I don&#8217;t think it&#8217;s Canonical&#8217;s own fault - it&#8217;s really hard to have an OS work on each and every hardware and giving it away from free - but from the user&#8217;s point of view this is a failure. &nbsp;Some key apps are also missing - <a href="http://www.openoffice.org/">OpenOffice</a>&nbsp;might not be enough a replacement for Office, and <a href="http://www.gimp.org/">GIMP</a>&nbsp;is not quite as effective as Adobe Photoshop.<br /><br />But the Mac has it all, and that means it&#8217;s got a <b>lot</b>&nbsp;of appeal on developers - we usually want the eye candy and the dark console, we like our computer to &#8216;just work&#8217; and yet we like to be able to tune every detail. Whenever I go to a conference I can see there&#8217;re far more Macs, iPads, iPhones than in any other typical business environment. A <b>lot</b> of developers from many communities simply love using Macs for their development work -<b> I simply don&#8217;t think that developers don&#8217;t count in Mac market as someone stated. </b>Maybe many of them are not Java developers, but as soon as they&#8217;re unable to install Eclipse they&#8217;ll complain as well.<br /><br />Apple&#8217;s Java sports its own Cocoa bindings, which are very useful to achieve a native look-and-feel, OS integration and general responsiveness for all java based software. <a href="http://www.eclipse.org/">Eclipse</a> is java based and it&#8217;s a widely used platform, <a href="http://www.jetbrains.com/ruby/">RubyMine</a> is one of the great favourites for Ruby coders, <a href="http://www.netbeans.org/">Netbeans</a> is evolving at a great pace and supports Java, Ruby, Python, PHP and many others. Not to mention the fact that while I write those lines it&#8217;s the <b>only</b>&nbsp;JDK available and working out of the box on Snow Leopard.<br /><br />Now this is going to <a href="http://developer.apple.com/library/mac/#releasenotes/Java/JavaSnowLeopardUpdate3LeopardUpdate8RN/NewandNoteworthy/NewandNoteworthy.html#//apple_ref/doc/uid/TP40010380-CH4-SW1">change</a>. Java is deprecated on Snow Leopard, won&#8217;t be included in Lion and can&#8217;t be used for Mac App Store.<br /><br />If Mac OS X were to be left with a third-party Java implementation - and let&#8217;s hope <a href="http://landonf.bikemonkey.org/static/soylatte/">SoyLatte</a> can cope with such burden - we&#8217;ll probably lose native OS integration, everything that&#8217;s Swing or SWT based will need X11 to run, Swing will probably use its native Metal widget set while SWT will probably rely on GTK+ bindings; Apple doesn&#8217;t even seem to be willing to contribute its own patches to the OpenJDK project, even though it would be meaningful if they just didn&#8217;t want to waste resources on what they think it&#8217;s a dead technology.<br /><br />It&#8217;s not a great scenario, but the real question here is: <b>why?</b><br /><b><br /></b><br />Why should Apple have done all that? Is it that difficult to <b>update&nbsp;</b>the current JDK to work with &nbsp;Lion? JDK7 might be a different topic, but hey - they&#8217;re basically dropping what they&#8217;ve already done! And they&#8217;re <b>not</b>&nbsp;letting anyone to continue their job easily.&nbsp;I think Apple is perfectly aware that the Mac OS X ecosystem is fairly different from the walled garden of IOS - &nbsp;Windows is still got a much larger market, and limiting what Mac OS X can do will just feed Microsoft&#8217;s pockets again.<br /><br />I don&#8217;t think there will be an official statement on that, but I bet Oracle has a part on this. Mac JDK seems to have been built by Apple but to have sprung from Sun&#8217;s own JDK - is Oracle not willing to let this deal to go on? Maybe Apple needed to renegotiate its license and it turned out to be too expensive?&nbsp;Even though Apple may think Java is dead, it has no apparent reason to silently stab it again.<br /><br />Their decision is causing a lot of <a href="http://lists.apple.com/archives/Java-dev/2010/Oct/index.html">noise</a>&nbsp;in the Mac/Java community, let&#8217;s see if Steve comments on this as well.</div>
]]></content>
  </entry>
  
</feed>
