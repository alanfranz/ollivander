<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dependency management | Ollivander]]></title>
  <link href="http://ollivander.franzoni.eu/blog/categories/dependency-management/atom.xml" rel="self"/>
  <link href="http://ollivander.franzoni.eu/"/>
  <updated>2015-02-19T17:13:44+01:00</updated>
  <id>http://ollivander.franzoni.eu/</id>
  <author>
    <name><![CDATA[Alan Franzoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Packaging Woes - part 3]]></title>
    <link href="http://ollivander.franzoni.eu/2014/02/09/python-packaging-woes-part-3/"/>
    <updated>2014-02-09T16:45:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2014/02/09/python-packaging-woes-part-3</id>
    <content type="html"><![CDATA[<p>A bit of wrap-up.</p>

<h3>Current state of the things</h3>

<p>I seem to have missed something: there&rsquo;s now a very active <a href="https://github.com/pypa">Python</a> <a href="https://bitbucket.org/pypa">Packaging</a> <a href="https://groups.google.com/forum/#!forum/pypa-dev">Authority</a> which is trying very hard to push Python packaging in the right direction, so that we can have a good set of tools that work properly together. Checkout their repositories and mailing lists.</p>

<p>Setuptools and distribute got <a href="https://mail.python.org/pipermail/distutils-sig/2013-March/020126.html">merged</a> and we won&rsquo;t experience a split-experience anymore, we&rsquo;ll just have One Tool To Rule Them All!</p>

<p>So, rejoice! Things are getting better!</p>

<h3>In the meantime</h3>

<p>I recommend using <a href="http://www.pip-installer.org">Pip</a> . Always try using requirements.txt, it&rsquo;s a good way to keep your versions
consistent and working.</p>

<p>Use <a href="http://www.virtualenv.org">virtualenv</a> for development purposes, and <strong>always test your package in a virtualenv with a disabled site-packages</strong>! Otherwise you risk you&rsquo;re distributing something that works on your workstation only because of a site-wide package you have installed there!</p>

<p>In order to distribute a package, you&rsquo;ll need setuptools/distribute as well;
just do a source distribution and a wheel distribution (you&rsquo;re required to
install <a href="https://pypi.python.org/pypi/wheel">wheel</a> beside setuptools); forget
about eggs, especially for eggs containing binary extensions.  Your command line
should be something like:</p>

<p><code>
python setup.py clean register sdist bdist_wheel upload
</code></p>

<p>And let&rsquo;s keep our fingers crossed on a better state of things!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Packaging Woes - part 2]]></title>
    <link href="http://ollivander.franzoni.eu/2013/09/06/python-packaging-woes-2/"/>
    <updated>2013-09-06T20:09:00+02:00</updated>
    <id>http://ollivander.franzoni.eu/2013/09/06/python-packaging-woes-2</id>
    <content type="html"><![CDATA[<p>Check out <a href="/2013/01/21/python-packaging-woes/">part 1</a> for my thoughts on what packaging and dependency
management should be. I forgot about this post and left it in a draft state for quite a lot of time, I&rsquo;m sorry!</p>

<h2>How Python messed it up</h2>

<h3>A Diaspora of Tools</h3>

<p>There&rsquo;s a plethora of packaging tools for Python! Let&rsquo;s take a look at them.</p>

<h4>Distutils</h4>

<p>The original <a href="http://docs.python.org/2/distutils/">distutils</a> is part of the Python standard library, but
it&rsquo;s not really feature-packed, and it&rsquo;s considered unsuitable for many production usages. As an example,
its
<a href="http://docs.python.org/2/distutils/setupscript.html#relationships-between-distributions-and-packages">requires</a>
keyword seems to do
<a href="http://blog.doughellmann.com/2007/11/requiring-packages-with-distutils.html">absolutely nothing else</a>
than documenting requirements. Nothing will happen if you install a package requiring another one;
you still need to install dependencies manually.</p>

<p>Distutils is not inherently bad, but since it&rsquo;s a standard library tool it&rsquo;s quite stable &ndash; it changes
very little and in very predictable ways, so it wasn&rsquo;t updated for a long time and got quite old and
tired, and needs an overhaul now (more on that later).</p>

<h4>Setuptools</h4>

<p>The original <a href="http://peak.telecommunity.com/DevCenter/setuptools">setuptools</a> package, which was created
by a clever guy called Phillip J. Eby, is what people used for a lot of time, and that it&rsquo;s unmantained
right now. It builds on distutils and extends/monkeypatches it, adding a lot of functionalities.</p>

<p>It includes <a href="http://peak.telecommunity.com/DevCenter/EasyInstall">easy_install</a> which is probably the
first tool that allowed people to install packages straight from pypi (or other URLs, more on that later)
on the command line, without a lot of manual intervention; also, if the downloaded package is
setuptools-aware and correctly specifies dependencies with
<a href="http://peak.telecommunity.com/DevCenter/setuptools#declaring-dependencies">install_requires</a> it will
install all transitive dependencies.</p>

<p>It includes <a href="http://peak.telecommunity.com/DevCenter/PkgResources">pkg_resources</a> as well; that last
one is one of the great Python underdogs, IMHO; it allows Python programmers to access any kind of
data which is installed in Python libraries, regardless of how it was installed &ndash; is it an egg? A
flat install? Did the install became part of the standard library? &ndash; don&rsquo;t worry: just ask for the
resource name and the package name, and pkg_resources will look up the file object for you and open
it.</p>

<p>Unluckily the API was not so easy to use &ndash; that&rsquo;s something I&rsquo;m trying to address in
<a href="http://pydenji.franzoni.eu">pydenji</a> with its resourceloader URL-parsing based system &ndash; and many
people to handle resource in python just &ldquo;look for them&rdquo; from the current directory using
introspection by <code>__file__</code>. Too bad.</p>

<h4>Distribute</h4>

<p>In the end, setuptools had little maintenance applied and was forked; distribute is dropin
replacement which shares functions and dysfunctions of its ancestor.</p>

<p>Recently it has been re-merged into setuptools.</p>

<p>This wouldn&rsquo;t be inherently a problem, but sometimes you can find projects that are distribute-unaware and try forcing
a specific-and-old version of setuptools, or you can find projects that know that setuptools is &ldquo;old&rdquo; and force
installing distribute (which is an issue since setuptools is now an actually updated distribute) :&ndash;/</p>

<h4>Distutils2</h4>

<p>The Next Big Thing in Python packaging, which has never happened so far &ndash; should have been available in Python 3.3, but
development seems to have <a href="http://hg.python.org/distutils2">stalled</a>.</p>

<h4>Pip</h4>

<p><a href="http://www.pip-installer.org/">Pip</a> is among the best tools you could use and works fine, but it&rsquo;s Yet Another Tool. It works
as his author thinks it&rsquo;s well done &ndash; which is usually a good thing, since Ian Bicking knows what he&rsquo;s doing.</p>

<h3>Dependency Management</h3>

<p>Dependency management is hard with distribute; you can&rsquo;t handle diamond dependencies nor do overrides.
Pypi repository is mutable (versions can be deleted by package owners) and isn&rsquo;t got a real API, even though, today, there&rsquo;s
a way to prevent the packages from being fetched from their homepage and just rely on pypi &ndash; see <a href="http://www.python.org/dev/peps/pep-0438/">PEP 438</a></p>

<p>One good way of handling dependency management in such cases is to use Pip&rsquo;s own requirements.txt file, which &ndash; of course &ndash; is not a standard, and may not work in all environments, or simply the project you love may not provide it at all.</p>

<h3>Consequences</h3>

<p>It&rsquo;s very easy to find packages from pypi that don&rsquo;t work out of the box, either because of wrong dependencies,
or because somehow pypi changed hosted versions since the time the package was built. Replicating a deployment
is not easy.</p>

<p>And different tools just don&rsquo;t play well together.</p>

<h2>What should be done?</h2>

<ul>
<li>Focusing more on the problem. Packaging and dependency management seem to be underdogs in the Python
community.</li>
<li>Choose a tool or an API (Maven repos became de-facto standard for non-Maven users as well) that can
work, and if it doesn&rsquo;t, evolve it, don&rsquo;t just let people invent their in-house solution. It&rsquo;s not
important if it&rsquo;s not part of the standard library.</li>
<li>Define best practices for packaging and dependencies (package layout, version numbers, metadata,
uploaded package formats, etc) and be sure the user doesn&rsquo;t override them unless he knows what and why
he does it.</li>
<li>Have a good doc linked from the official documentation. The current <a href="http://guide.python-distribute.org/">packaging
guide</a> is not complete and it&rsquo;s not linked from anything
&ldquo;official&rdquo; &ndash; it&rsquo;s just another guide.</li>
</ul>


<h2>But?</h2>

<p>There&rsquo;s a light at the end of the gallery, and it&rsquo;s not a train! We&rsquo;ll talk about it in part 3. Which I hope should happen soon enough :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Packaging Woes - part 1]]></title>
    <link href="http://ollivander.franzoni.eu/2013/01/21/python-packaging-woes/"/>
    <updated>2013-01-21T23:40:00+01:00</updated>
    <id>http://ollivander.franzoni.eu/2013/01/21/python-packaging-woes</id>
    <content type="html"><![CDATA[<p>This is a spinoff from my <a href="https://ep2012.europython.eu/conference/talks/language-alone-wont-pay-your-bills">Europython 2012 talk</a> (<a href="http://www.youtube.com/watch?v=JlNYO4zUDAQ">video</a>, <a href="https://ep2013.europython.eu/media/conference/slides/language-alone-wont-pay-your-bills.pdf">slides</a>).</p>

<p>Some days ago I got involved in a brief <a href="https://twitter.com/hpk42/status/292599238095933440">discussion</a> on the topic, <strong>so here&rsquo;s what I think about Python packaging and dependency management: it&rsquo;s in a very bad state, requires a lot of manual intervention to work properly and heavily limits code reuse.</strong></p>

<p>Why? Let&rsquo;s see.</p>

<h2>The Packaging Conspiracy</h2>

<h3>Aim</h3>

<p>No, it&rsquo;s not a conspiracy to force you to learn something you don&rsquo;t care about. The whole point of packaging is to make code reuse easy enough, both for the developer&rsquo;s own sake (e.g. shared code between different projects) and for sharing it with the public.</p>

<p><strong>Packaging usually involves dependency management</strong>; this happens in most Linux distributions as well as other packaging systems (e.g. Apache Maven, Rubygems), because you don&rsquo;t just release your code in &ldquo;in the dark&rdquo;: you are releasing version 1.0.0 of your code on January, 1st 2013, and that usually matches (or should match) an exact revision on your source control system, and a precise set of dependencies, because your own software or library may have its own requirements.</p>

<h3>It&rsquo;s an overkill!</h3>

<p>Some developers think all of this is a waste of their time.</p>

<p><em>D: Hey Alan, are you really saying say I can&rsquo;t just copy and paste some source code in some directory and just go on? How much time should I spend at this tedious task?!?</em></p>

<p>A: Sure, just copy and paste. And remember copying and pasting all transitive dependencies as well. And since this is Python, start hoping all your transitive dependencies are pure Python, otherwise good luck at copypasting C source code into your repo and remembering to compile it every time. And whenever you need a bugfix in your upstream dependency, good luck at remembering where you&rsquo;ve fetched that code from, and at which revision. Oh, did you write the URL and the revision somewhere in the VCS commit message? Fine, <strong>you&rsquo;re doing by hand the work that a good dependency management tool is supposed to do</strong>. If you like that.</p>

<p><em>D: OK, ok. I got it. So now I&rsquo;ve added my dependencies. But what the heck, does the version really matter? I don&rsquo;t care! If a new version of something I rely on is released, it will contain bugfixes and maybe new features, but won&rsquo;t break my code.</em></p>

<p>A: Dear developer, I think your great trust in the Developer From The Next Door is something that feeds your heart but hinders your brain. You should depend on Only One Version for your production code; when it&rsquo;s time to upgrade to a later one, you need to do a manual test run and verify everything is fine. If you forget about doing that, your imagination will be the only limit to whatever mess can happen.</p>

<p><em>D: OK, ok, now I&rsquo;ve set versions for all my deps. What version should I use for my own software, though? Can I just pick any version I like? First version 1.0, then 1.1, until I get to 1.99 and i move to 2.0?</em></p>

<p>A: Try doing something meaningful, and stick to your plan. <strong>You can pick your own versioning policy</strong>. Usually your version numbers should distinguish at least between major releases, where you can break backwards compatibility (if you must, not just because you enjoy) and add a lot of new things, and bugfix releases, where you try to minimize the changes to what really needs to be fixed, in order not to mess up client code. Many softwares used to use a two-dotted version number, something like MAJOR.MINOR.REVISION, with REVISION being used for bugfixes only, but the distinction between MAJOR and MINOR is blurred and often just something &ldquo;emotional&rdquo;. If you perform small incremental changes on your codebase &ndash; <a href="http://blog.chromium.org/2010/07/release-early-release-often.html">a-la-Chrome</a> &ndash; you can stick with just MAJOR.REVISION. Every feature-adding release increases the MAJOR, every bugfix increases the REVISION. Of course, remember that your MAJOR should be strictly increasing, while REVISION is usually reset at 0 for every MAJOR and then strictly increasing.</p>

<p><em>D: So, what should I do now? Where do I release my code? Should I copypaste my code somewhere? I know of a great pastebin!</em></p>

<p>A: You should usually aggregate your build into an artifact (= product of the build) and you should upload it to a shared repository, where you and other people agree uploading your software to and fetching other people software from.</p>

<p><em>D: YEAH! I&rsquo;ve just released version 0.0.2 to the public. Now I&rsquo;m deleting 0.0.1, right?</em></p>

<p>A: No. Never. Ideally, unless you must &ndash; by must I mean something like &ldquo;there&rsquo;s a password for my bank account in the source code&rdquo; or &ldquo;I mistakenly copypasted code for which I hadn&rsquo;t the copyright&rdquo; &ndash; <strong>you should never, ever, ever, remove a released version</strong>. You never know who&rsquo;s using it &ndash; if my software works fine with 0.0.1, why should I be forced to upgrade? You can shout at me if I ever ask anything about it to you, according to your version policy, but you shouldn&rsquo;t care about old versions otherwise. If tagging is supported on the repository you might want to tag old versions as &ldquo;deprecated&rdquo;, &ldquo;bugged&rdquo;, or maybe &ldquo;donut&rdquo; if they contain a huge security hole.</p>

<p><em>D: I like fancy names. Can I name my next release 2.0.5sarah? You know, it&rsquo;s my first daughter and she was born in the very day of such release.</em></p>

<p>A: I&rsquo;m happy of hearing that, but please stick with numbers only. Is 2.0.5sarah higher or lower than 2.0.6? No, &ldquo;lexicographical&rdquo; is not what you and I want to hear in such context. You may want to use a suffix/prefix/tag to mark non-final releases, e.g. alpha/beta/development releases, preferably a SINGLE suffix, which is widely recognized, for all of those, and decide once-for-all if it means lower or higher. Usually it means &ldquo;lower&rdquo;, so that 2.0.0beta is &lt; 2.0.0, but that&rsquo;s not always the case &ndash; a very good idea is to deny that the same version of a package can exist both for a development and production version. I.e. if 2.1.&lsquo;&rsquo; is beta, 2.0.5 can be a production release, but not 2.1.0 or 2.1.1.</p>

<p><em>D: There&rsquo;re a lot of things to remember about dependency management and packaging. Should I learn everything by heart?</em></p>

<p>A: What the heck, no. <strong>Your packaging tool should guide you in such practices</strong> and prevent you from going stray unless it&rsquo;s what you really mean to do! That why I&rsquo;m complaining in the first place about the way Python does packaging!</p>

<p>In <a href="/2013/09/06/python-packaging-woes-2/">part 2</a> I dig into Python-specific packaging issues.</p>
]]></content>
  </entry>
  
</feed>
